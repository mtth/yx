-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Row-major coordinates
--   
--   <a>https://github.com/mtth/yx</a>
@package yx
@version 0.0.2.0


-- | A bitmap-friendly XY coordinate.
--   
--   YX rather than XY since layout is row major (first row sorts before
--   the second, etc.).
module Data.Geometry.YX

-- | A 2D coordinate.
--   
--   YX implements <a>Num</a>. Integers are converted to their diagonal
--   equivalent (for example <tt>2</tt> becomes <tt>YX 2 2</tt>).
data YX
YX :: !Int -> !Int -> YX
[y] :: YX -> !Int
[x] :: YX -> !Int

-- | The smallest rectangle containing the input coordinates.
box :: Foldable f => f YX -> Maybe (YX, YX)

-- | All coordinates, grouped by row.
rowRange :: (YX, YX) -> [[YX]]

-- | Basic steps.
up :: YX

-- | Basic steps.
left :: YX

-- | Basic steps.
right :: YX

-- | Basic steps.
down :: YX

-- | Ordered array of the 4 base steps.
steps4 :: [YX]

-- | Ordered array of the 8 steps (4 base and 4 diagonal).
steps8 :: [YX]

-- | Parse newline delimited bytestring into an array.
byteStringToArray :: (IArray a e) => (Char -> Maybe e) -> ByteString -> Either String (a YX e)

-- | Reverse of <a>byteStringToArray</a>
arrayToByteString :: (IArray a e) => (e -> Char) -> a YX e -> ByteString
instance GHC.Show.Show Data.Geometry.YX.YX
instance GHC.Classes.Ord Data.Geometry.YX.YX
instance GHC.Classes.Eq Data.Geometry.YX.YX
instance GHC.Num.Num Data.Geometry.YX.YX
instance GHC.Arr.Ix Data.Geometry.YX.YX
